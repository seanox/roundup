# Description
# ----
#
# The filter file is a text file that is read line by line.
#
# A hash at the beginning of a line (blank characters are allowed before) marks
# the line as a comment. Comments are not read and skipped. Means they are
# processed as if the line does not exist.
#
# The filters are divided into sections. A section begins after a blank line or
# if the line does not begin with a blank character. Therefore, the subsequent
# lines of a section are indented. If a line is to be continued, the following
# line starts with indented spaces. The line break and any surrounding spaces
# are then ignored.
#
# The section of a filter starts with a statement.
# Syntax: <alias from an account in roundup.ini> <source> <target>
# The alias for an account is case insensitive.
# Target can be 'NOTHING'. The analysis of the so detected message is then
# aborted and following filters are ignored. The behavior is comparable with an
# entry in a white list.
#     IMPORTANT:
# The application uses a different URL syntax for mailboxes.
# Therefore not "." but "/" is used!
# You can use the URL encoding (%## and +).
#
# Variables with expressions follow the statement. Each statement supports
# multiple variables with a regular expression. A variable consists of word
# characters separated from the regular expression by a colon. A variable is
# case insensitive and the scope is limited to the section. If a variable is
# defined multiple times for a section, the last definition wins.
#
# Syntax of a pattern:
# <variable>: <regular expression>
#
# The last line in a section is a logical expression. A logical expression
# supports: AND, OR, NOT, round brackets and the variables of the patterns. The
# result must be explicitly TRUE for the statement to be applied.
#
# The message is optimized for the filters (only in memory, nor in real).
# Each header is summarized in one line.
# If a header is an array, a header line is created for each array entry.
# The values of the headers are decoded if appropriate.
#
# Syntax of the header lines:
# <header>: <value>
# 
# Header and body are separated by a blank line [CRLF][CRLF].
#
# Uses the body multi-parts with a boundary. The multi-parts remain intact.
# The body/content of the multi-parts for the Content-Type: text/* are decoded
# and combined in one line. For other data types, the alias: DATA <Content-Type>
# is used.
#
# If the body does not use a multipart, the content is decoded in one line.



# Find all desired newsletters and move them from inbox to newsletter.
EXAMPLE-A /INBOX > /Newsletter
A0: /^From:.*news(letter)*.*@.*/im
A1: /^From:.*@((news(letter))|nl)\..*/im
AA: /^From:.*@.*(\.company-a|\.company-b|\.company-c)\.(de|com)/im
AB: /^From:.*@.*(\.company-e)\.(de|com)/im
AC: /^From:.*@.*(\.company-e)\.(de|com)/im
AD: /^From:.*@.*(\.company-f)\.(de|com)/im
B1: /^From:.*service@.*\.company-x\.de/im
B2: /http(s)*:\/\/news\.company-x\.de/
(A0 || A1) && (AA || AB || AC || AD)) || (B1 && B2)

# Find unwanted newsletters and move them to spam.  
EXAMPLE-A /INBOX > /Spam
A: /^(Received|From):.*news(letter)*.*@.*/im
B: /^(Received|From):.*@((news(letter))|nl)\..*/im
C: /(newsletter|now|jetzt) (unsubscribe|abmelden)/i
D: /<a\s[^>]+http(s)*:\/\/[^>]+\bunsubscribe\b/i
E: /^List-Unsubscribe:/im
A || B || C || D || E
 
# Find fake messages about undelivered mails and messages and move them to spam.
EXAMPLE-A /INBOX > /Spam
A: /(view|broken|missed)\s+(email|message|notification)/i
B: /\d{3}\.\d{3}\.0{2}[^\d]/i
A || B

# Find spam with suspicious/obfuscated senders and move them to spam.
EXAMPLE-A /INBOX > /Spam
A: /^X-Envelope-From:\s*<\s*>/im
B: /^Reply-to:\s*<\s*>/im
A || B

# Find fake messages where the company name does not appear in the e-mail address.
# Find mails with dubious encoding (e.g. ?UTF-8?B?) in 'From' and if @ followed by numbers. 
EXAMPLE-A /INBOX > /Spam
A: /^From:.*(google|facebook|ebay|amazon|paypal)/im
B: /^From:.*?(google|facebook|ebay|amazon|paypal).*<.*@[^>]*\1\.(com|de)>/im
C: /^From:.*\?UTF\-\d+\?B\?.*@\d+.*$/im
(A && !B) || C

# Find all desired newsletters and move them from inbox to newsletter.
EXAMPLE-B /INBOX > /Newsletter
A0: /^From:.*@((news(letter))|nl)\..*/im
A1: /^From:.*@.*(
    \.company-a
    |\.company-b
    |\.company-c)\.(de|com)/im
B1: /^From:.*service@.*\.company-x\.de/im
B2: /http(s)*:\/\/news\.company-x\.de/
(A0 && A1) || (B1 && B2)
